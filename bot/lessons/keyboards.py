from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.lessons.models import Lessons
from bot.lessons.service import LessonService
from bot.utils.buttons import BUTTONS
from bot.utils.messages import MESSAGES


class LessonKeyboard:
    def __init__(self):
        self.db = LessonService()

    async def lesson_menu_btn(self, lesson: Lessons, emoji_list: list = None) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()

        # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏
        if emoji_list:
            for emoji in emoji_list:
                builder.add(
                    InlineKeyboardButton(
                        text=f'{emoji["button"]}({emoji["count"]})',
                        callback_data=f'emoji_{emoji["button"]}'
                    )
                )

        builder.button(
            text=BUTTONS['BACK'],
            callback_data=f'back_{lesson.course_id}'
        )
        if lesson.work_type_id != 1:

            builder.button(
                text=BUTTONS['START_TASK'],
                callback_data=f'start_task_{lesson.course_id}'
            )
        else:
            builder.button(
                text=BUTTONS['CLOSE_LESSON'],
                callback_data=f'close_lesson_{lesson.course_id}'
            )
        builder.adjust(3)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def lessons_btn(self, course_id: str, user_id: int) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–∫–æ–≤"""

        builder = InlineKeyboardBuilder()
        lessons_from_db = await self.db.get_lessons(course_id, user_id)

        if not lessons_from_db:
            # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
            first_lesson = await self.db.get_first_lesson(course_id)
            builder.button(
                text=first_lesson,
                callback_data=f'lesson_{first_lesson[:20]}'
            )

            builder.adjust(1)

            return builder.as_markup(
                resize_keyboard=True,
                input_field_placeholder=MESSAGES['CHOOSE_LESSONS'],
                one_time_keyboard=True
            )

        for lesson in lessons_from_db:
            if lesson['status_id'] == 4:
                builder.button(
                    text=lesson['title'] + '‚úÖ',
                    callback_data=f'lesson_{lesson["title"][:20]}'
                )
            elif lesson['status_id'] == 3:
                builder.button(
                    text=lesson['title'] + '‚ùó',
                    callback_data=f'lesson_{lesson["title"][:20]}'
                )
            elif lesson['status_id'] in (1, 2):
                builder.button(
                    text=lesson['title'] + 'üëÄ ',
                    callback_data=f'lesson_{lesson["title"][:20]}'
                )

        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder=MESSAGES['CHOOSE_LESSONS'],
            one_time_keyboard=True
        )

    async def test_answers_btn(self, count_answers: int, selected: list[int] = None) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞"""

        letter_list = ['1', '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò']

        builder = InlineKeyboardBuilder()
        for num in range(1, count_answers + 1):
            if selected and num in selected:
                builder.button(
                    text=f'–í–∞—Ä–∏–∞–Ω—Ç {letter_list[num]} ‚úÖ',
                    callback_data=f'test_answers_{num}'
                )
                continue
            builder.button(
                text=f'–í–∞—Ä–∏–∞–Ω—Ç {letter_list[num]}',
                callback_data=f'test_answers_{num}'
            )

        builder.adjust(2)

        # –∫–Ω–æ–ø–∫–∞ '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç' –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∏–∂–Ω–∏–º —Ä—è–¥–æ–º
        builder.row(InlineKeyboardButton(
            text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç',
            callback_data='check_answer'
        ))

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def next_question_btn(self, test_questions: list[dict]) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —Ç–µ—Å—Ç–µ –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        if len(test_questions) == 0:
            builder.button(
                text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
                callback_data='next_question'
            )
        else:
            builder.button(
                text='–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
                callback_data='next_question'
            )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def next_lesson_btn(self, lesson: Lessons = None) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=lesson.title,
            callback_data=f'lesson_{lesson.title[:20]}'

        )

        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=MESSAGES['NEXT_LESSON'],
        )

    async def close_lesson_btn(self, lesson: Lessons) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['CLOSE_LESSON'],
            callback_data=f'close_lesson_{lesson.course_id}'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def start_again_lesson(self, lesson: Lessons) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['AGAIN'],
            callback_data=f'lesson_{lesson.title[:20]}'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def additional_task_btn(self):
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ–ø –∑–∞–¥–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É (–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –í—ã–ø–æ–ª–Ω–∏–ª)"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['SKIP'],
            callback_data='skip_additional_task'
        )
        builder.button(
            text=BUTTONS['DONE'],
            callback_data='done_additional_task'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
