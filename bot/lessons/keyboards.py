from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.lessons.models import Lessons
from bot.lessons.service import LessonService
from bot.utils.buttons import BUTTONS
from bot.utils.messages import MESSAGES


class LessonKeyboard:
    def __init__(self):
        self.db = LessonService()

    async def lesson_menu_btn(self, lesson: Lessons) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['BACK'],
            callback_data=f'back_{lesson.course_id}'
        )
        if lesson.work_type_id:

            builder.button(
                text=BUTTONS['START_TASK'],
                callback_data=f'start_task_{lesson.course_id}'
            )
        else:
            builder.button(
                text=BUTTONS['CLOSE_LESSON'],
                callback_data=f'close_lesson_{lesson.course_id}'
            )
        builder.adjust(3)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def lessons_btn(self, course_id: str, user_id: int) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–∫–æ–≤"""

        builder = InlineKeyboardBuilder()
        lessons_from_db = await self.db.get_lessons(course_id)
        result = {}
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É
        sorted_lessons_by_status_id = sorted(lessons_from_db, key=lambda elem: (elem['order_num'], elem['status_id']))
        for lesson in sorted_lessons_by_status_id:
            result[lesson['title']] = (lesson['status_id'], lesson['user_id'])

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞
        # –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ - '‚úÖ'(id —Å—Ç–∞—Ç—É—Å–∞ = 4)
        # –ø—Ä–∏ –∑–∞–≤–∞–ª–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ - '‚ùó' (id —Å—Ç–∞—Ç—É—Å–∞ = 3)
        # –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º —É—Ä–æ–∫–µ - 'üëÄ' (id —Å—Ç–∞—Ç—É—Å–∞ = 1 –∏–ª–∏ 2)
        for lesson in result:
            if result[lesson][0] == 4 and result[lesson][1] == user_id:
                builder.button(
                    text=lesson + '‚úÖ',
                    callback_data=lesson
                )
            elif result[lesson][0] == 3 and result[lesson][1] == user_id:
                builder.button(
                    text=lesson + '‚ùó',
                    callback_data=lesson
                )
            elif result[lesson][0] in (1, 2) and result[lesson][1] == user_id:
                builder.button(
                    text=lesson + 'üëÄ ',
                    callback_data=lesson
                )
            else:
                builder.button(
                        text=lesson,
                        callback_data=lesson
                )

        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder=MESSAGES['CHOOSE_LESSONS'],
            one_time_keyboard=True
        )

    async def test_answers_btn(self, count_answers: int, selected: list[int] = None) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞"""

        letter_list = ['1', '–ê', '–ë', '–í', '–ì', '–î', '–ï']

        builder = InlineKeyboardBuilder()
        for num in range(1, count_answers + 1):
            if selected and num in selected:
                builder.button(
                    text=f'{letter_list[num]} ‚úÖ',
                    callback_data=f'test_answers_{num}'
                )
                continue
            builder.button(
                text=letter_list[num],
                callback_data=f'test_answers_{num}'
            )

        builder.adjust(2)

        # –∫–Ω–æ–ø–∫–∞ '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç' –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∏–∂–Ω–∏–º —Ä—è–¥–æ–º
        builder.row(InlineKeyboardButton(
            text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç',
            callback_data='check_answer'
        ))

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def next_question_btn(self) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —Ç–µ—Å—Ç–µ –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text='–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
            callback_data='next_question'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def next_lesson_btn(self, lesson: Lessons = None) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=lesson.title,
            callback_data=lesson.title

        )

        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=MESSAGES['NEXT_LESSON'],
        )

    async def close_lesson_btn(self, lesson: Lessons) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['CLOSE_LESSON'],
            callback_data=f'close_lesson_{lesson.course_id}'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def start_again_lesson(self, lesson: Lessons) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞"""

        builder = InlineKeyboardBuilder()
        builder.button(
            text=BUTTONS['AGAIN'],
            callback_data=f'{lesson.title}'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

    async def get_test_btn(self):
        builder = InlineKeyboardBuilder()
        builder.button(
            text='testrun',
            callback_data='start_test'
        )
        builder.adjust(1)

        return builder.as_markup(
            resize_keyboard=True,
            one_time_keyboard=True
        )
